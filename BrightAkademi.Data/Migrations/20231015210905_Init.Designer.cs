// <auto-generated />
using System;
using BrightAkademi.Data.Concrete.EfCore.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BrightAkademi.Data.Migrations
{
    [DbContext(typeof(BrightAkademiContext))]
    [Migration("20231015210905_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.11");

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(9679),
                            Description = "Kategorisi silinenleri buraya atacağız",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(9698),
                            Name = "Genel",
                            Url = "genel"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(9704),
                            Description = "Full Stack Web Developer",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(9704),
                            Name = "Full Stack Web Developer",
                            Url = "full-stack-web-developer"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(9706),
                            Description = "IOS Developer",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(9707),
                            Name = "IOS Developer",
                            Url = "ios-developer"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(9709),
                            Description = "BackEnd Developer",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(9710),
                            Name = "BackEnd Developer",
                            Url = "backend-developer"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(9711),
                            Description = "FrontEnd Developer",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(9712),
                            Name = "FrontEnd Developer",
                            Url = "frontend-developer"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(9713),
                            Description = "Java Developer",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(9714),
                            Name = "Java Developer",
                            Url = "java-developer"
                        });
                });

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("About")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Yazılım eğitimi veren ana kucağı",
                            Address = "Kuloğlu Mh., Barbaros Blv. Yıldız İş Hanı No:9, 34353 Beşiktaş/İstanbul",
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 879, DateTimeKind.Local).AddTicks(6497),
                            Email = "info.wissenakademie.com",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 879, DateTimeKind.Local).AddTicks(6510),
                            Name = "Wissen Akademie",
                            PhoneNumber = "1234567890"
                        });
                });

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.CourseStudent", b =>
                {
                    b.Property<int?>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CourseId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("CourseStudents");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            StudentId = 1
                        },
                        new
                        {
                            CourseId = 1,
                            StudentId = 2
                        },
                        new
                        {
                            CourseId = 2,
                            StudentId = 3
                        },
                        new
                        {
                            CourseId = 2,
                            StudentId = 4
                        },
                        new
                        {
                            CourseId = 3,
                            StudentId = 5
                        },
                        new
                        {
                            CourseId = 3,
                            StudentId = 6
                        },
                        new
                        {
                            CourseId = 4,
                            StudentId = 7
                        },
                        new
                        {
                            CourseId = 4,
                            StudentId = 8
                        },
                        new
                        {
                            CourseId = 5,
                            StudentId = 9
                        },
                        new
                        {
                            CourseId = 5,
                            StudentId = 10
                        },
                        new
                        {
                            CourseId = 6,
                            StudentId = 1
                        },
                        new
                        {
                            CourseId = 6,
                            StudentId = 2
                        },
                        new
                        {
                            CourseId = 7,
                            StudentId = 3
                        },
                        new
                        {
                            CourseId = 7,
                            StudentId = 4
                        },
                        new
                        {
                            CourseId = 8,
                            StudentId = 5
                        },
                        new
                        {
                            CourseId = 8,
                            StudentId = 6
                        },
                        new
                        {
                            CourseId = 9,
                            StudentId = 7
                        },
                        new
                        {
                            CourseId = 9,
                            StudentId = 8
                        },
                        new
                        {
                            CourseId = 10,
                            StudentId = 9
                        },
                        new
                        {
                            CourseId = 10,
                            StudentId = 10
                        },
                        new
                        {
                            CourseId = 11,
                            StudentId = 1
                        },
                        new
                        {
                            CourseId = 11,
                            StudentId = 2
                        },
                        new
                        {
                            CourseId = 12,
                            StudentId = 3
                        },
                        new
                        {
                            CourseId = 12,
                            StudentId = 4
                        },
                        new
                        {
                            CourseId = 13,
                            StudentId = 5
                        },
                        new
                        {
                            CourseId = 13,
                            StudentId = 6
                        },
                        new
                        {
                            CourseId = 14,
                            StudentId = 7
                        },
                        new
                        {
                            CourseId = 14,
                            StudentId = 8
                        },
                        new
                        {
                            CourseId = 15,
                            StudentId = 9
                        },
                        new
                        {
                            CourseId = 15,
                            StudentId = 10
                        });
                });

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Levels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 879, DateTimeKind.Local).AddTicks(9561),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 879, DateTimeKind.Local).AddTicks(9563),
                            Name = "Easy"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 879, DateTimeKind.Local).AddTicks(9566),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 879, DateTimeKind.Local).AddTicks(9566),
                            Name = "Medium"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 879, DateTimeKind.Local).AddTicks(9567),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 879, DateTimeKind.Local).AddTicks(9568),
                            Name = "Senior"
                        });
                });

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(9418),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(9421),
                            Name = "Super Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(9423),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(9424),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(9425),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(9425),
                            Name = "Trainer"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(9426),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(9427),
                            Name = "Trainee"
                        });
                });

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("EducationalStatus")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(7194),
                            EducationalStatus = "Kayıtlı öğrenci başlayacak.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(7200),
                            UserId = 8
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(7203),
                            EducationalStatus = "Kayıtlı öğrenci başlayacak.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(7203),
                            UserId = 9
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(7204),
                            EducationalStatus = "Kayıtlı öğrenci başlayacak.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(7205),
                            UserId = 10
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(7206),
                            EducationalStatus = "Kayıtlı öğrenci başlayacak.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(7206),
                            UserId = 11
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(7207),
                            EducationalStatus = "Kayıtlı öğrenci başlayacak.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(7208),
                            UserId = 12
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(7209),
                            EducationalStatus = "Kayıtlı öğrenci başlayacak.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(7209),
                            UserId = 13
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(7210),
                            EducationalStatus = "Kayıtlı öğrenci başlayacak.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(7210),
                            UserId = 14
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(7211),
                            EducationalStatus = "Kayıtlı öğrenci başlayacak.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(7212),
                            UserId = 15
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(7213),
                            EducationalStatus = "Kayıtlı öğrenci başlayacak.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(7213),
                            UserId = 16
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(7214),
                            EducationalStatus = "Kayıtlı öğrenci başlayacak.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(7214),
                            UserId = 17
                        });
                });

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("EducationInfo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Experience")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Profession")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "10 puan",
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 879, DateTimeKind.Local).AddTicks(8569),
                            EducationInfo = "Zonguldak Bilgisayar Öğretmenliği",
                            Experience = "30",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 879, DateTimeKind.Local).AddTicks(8573),
                            Profession = "Full Stack Web Developer",
                            UserId = 3
                        },
                        new
                        {
                            Id = 2,
                            Comment = "10 puan",
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 879, DateTimeKind.Local).AddTicks(8577),
                            EducationInfo = "Eskişehir Bilgisayar Mühendisliği",
                            Experience = "10",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 879, DateTimeKind.Local).AddTicks(8578),
                            Profession = "IOS Developer",
                            UserId = 4
                        },
                        new
                        {
                            Id = 3,
                            Comment = "10 puan",
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 879, DateTimeKind.Local).AddTicks(8580),
                            EducationInfo = "Bahçeşehir Üniversitesi Yazılım Mühendisliği",
                            Experience = "2",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 879, DateTimeKind.Local).AddTicks(8580),
                            Profession = "Backend Developer",
                            UserId = 5
                        },
                        new
                        {
                            Id = 4,
                            Comment = "10 puan",
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 879, DateTimeKind.Local).AddTicks(8582),
                            EducationInfo = "Arel Üniversitesi Elektronik Haberleşme Mühendisliği",
                            Experience = "2",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 879, DateTimeKind.Local).AddTicks(8582),
                            Profession = "Frontend Developer",
                            UserId = 6
                        },
                        new
                        {
                            Id = 5,
                            Comment = "10 puan",
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 879, DateTimeKind.Local).AddTicks(8584),
                            EducationInfo = "Doğuş Üniversitesi",
                            Experience = "2",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 879, DateTimeKind.Local).AddTicks(8584),
                            Profession = "Java Developer",
                            UserId = 7
                        });
                });

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.TeacherCourse", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("CourseId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherCourses");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            TeacherId = 1,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 881, DateTimeKind.Local).AddTicks(3530),
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 881, DateTimeKind.Local).AddTicks(3535)
                        },
                        new
                        {
                            CourseId = 2,
                            TeacherId = 1,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 881, DateTimeKind.Local).AddTicks(3538),
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 881, DateTimeKind.Local).AddTicks(3538)
                        },
                        new
                        {
                            CourseId = 3,
                            TeacherId = 1,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 881, DateTimeKind.Local).AddTicks(3540),
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 881, DateTimeKind.Local).AddTicks(3540)
                        },
                        new
                        {
                            CourseId = 4,
                            TeacherId = 2,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 881, DateTimeKind.Local).AddTicks(3541),
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 881, DateTimeKind.Local).AddTicks(3542)
                        },
                        new
                        {
                            CourseId = 5,
                            TeacherId = 2,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 881, DateTimeKind.Local).AddTicks(3543),
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 881, DateTimeKind.Local).AddTicks(3543)
                        },
                        new
                        {
                            CourseId = 6,
                            TeacherId = 2,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 881, DateTimeKind.Local).AddTicks(3545),
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 881, DateTimeKind.Local).AddTicks(3545)
                        },
                        new
                        {
                            CourseId = 7,
                            TeacherId = 3,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 881, DateTimeKind.Local).AddTicks(3546),
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 881, DateTimeKind.Local).AddTicks(3547)
                        },
                        new
                        {
                            CourseId = 8,
                            TeacherId = 3,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 881, DateTimeKind.Local).AddTicks(3548),
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 881, DateTimeKind.Local).AddTicks(3548)
                        },
                        new
                        {
                            CourseId = 9,
                            TeacherId = 3,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 881, DateTimeKind.Local).AddTicks(3549),
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 881, DateTimeKind.Local).AddTicks(3550)
                        },
                        new
                        {
                            CourseId = 10,
                            TeacherId = 4,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 881, DateTimeKind.Local).AddTicks(3551),
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 881, DateTimeKind.Local).AddTicks(3551)
                        },
                        new
                        {
                            CourseId = 11,
                            TeacherId = 4,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 881, DateTimeKind.Local).AddTicks(3552),
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 881, DateTimeKind.Local).AddTicks(3553)
                        },
                        new
                        {
                            CourseId = 12,
                            TeacherId = 4,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 881, DateTimeKind.Local).AddTicks(3554),
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 881, DateTimeKind.Local).AddTicks(3554)
                        },
                        new
                        {
                            CourseId = 13,
                            TeacherId = 5,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 881, DateTimeKind.Local).AddTicks(3555),
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 881, DateTimeKind.Local).AddTicks(3556)
                        },
                        new
                        {
                            CourseId = 14,
                            TeacherId = 5,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 881, DateTimeKind.Local).AddTicks(3557),
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 881, DateTimeKind.Local).AddTicks(3557)
                        },
                        new
                        {
                            CourseId = 15,
                            TeacherId = 5,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 881, DateTimeKind.Local).AddTicks(3558),
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 881, DateTimeKind.Local).AddTicks(3559)
                        });
                });

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(8228),
                            Firstname = "Mücahit",
                            IsActive = true,
                            IsDeleted = false,
                            Lastname = "Admin",
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(8231),
                            Password = "superadmin",
                            Username = "superadmin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(8235),
                            Firstname = "Mücahit",
                            IsActive = true,
                            IsDeleted = false,
                            Lastname = "Admin",
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(8235),
                            Password = "admin",
                            Username = "admin"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(8237),
                            Firstname = "Ramiz",
                            IsActive = true,
                            IsDeleted = false,
                            Lastname = "Karaeski",
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(8238),
                            Password = "ramizkaraeski",
                            Username = "ramizkaraeski"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(8240),
                            Firstname = "Kenan",
                            IsActive = true,
                            IsDeleted = false,
                            Lastname = "Birkan",
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(8240),
                            Password = "kenanbirkan",
                            Username = "kenanbirkan"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(8242),
                            Firstname = "Ezel",
                            IsActive = true,
                            IsDeleted = false,
                            Lastname = "Bayraktar",
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(8242),
                            Password = "ezelbayraktar",
                            Username = "ezelbayraktar"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(8244),
                            Firstname = "Serdar",
                            IsActive = true,
                            IsDeleted = false,
                            Lastname = "Tezcan",
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(8244),
                            Password = "serdartezcan",
                            Username = "serdartezcan"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(8246),
                            Firstname = "Selma",
                            IsActive = true,
                            IsDeleted = false,
                            Lastname = "Hünel",
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(8246),
                            Password = "selmahunel",
                            Username = "selmahunel"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(8248),
                            Firstname = "Eyşan",
                            IsActive = true,
                            IsDeleted = false,
                            Lastname = "Atay",
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(8249),
                            Password = "eysanatay",
                            Username = "eysanatay"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(8250),
                            Firstname = "Ali",
                            IsActive = true,
                            IsDeleted = false,
                            Lastname = "Kırgız",
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(8251),
                            Password = "alikizgin",
                            Username = "alikizgin"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(8252),
                            Firstname = "Teyfik",
                            IsActive = true,
                            IsDeleted = false,
                            Lastname = "Zaim",
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(8253),
                            Password = "teyfikzaim",
                            Username = "teyfikzaim"
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(8254),
                            Firstname = "Hayratlı",
                            IsActive = true,
                            IsDeleted = false,
                            Lastname = "Eskikabadayı",
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(8255),
                            Password = "hayratlieskikabadayi",
                            Username = "hayratlieskikabadayi"
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(8256),
                            Firstname = "Cengiz",
                            IsActive = true,
                            IsDeleted = false,
                            Lastname = "Atay",
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(8257),
                            Password = "cengizatay",
                            Username = "cengizatay"
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(8258),
                            Firstname = "Bade",
                            IsActive = true,
                            IsDeleted = false,
                            Lastname = "Garson",
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(8259),
                            Password = "badegarson",
                            Username = "badegarson"
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(8260),
                            Firstname = "Şebnem",
                            IsActive = true,
                            IsDeleted = false,
                            Lastname = "Sertuna",
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(8260),
                            Password = "sebnemsertuna",
                            Username = "sebnemsertuna"
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(8262),
                            Firstname = "Temmuz",
                            IsActive = true,
                            IsDeleted = false,
                            Lastname = "Kocaoğlu",
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(8262),
                            Password = "temmuzkocaoglu",
                            Username = "temmuzkocaoglu"
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(8264),
                            Firstname = "Bahar",
                            IsActive = true,
                            IsDeleted = false,
                            Lastname = "Tezcan",
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(8264),
                            Password = "bahartezcan",
                            Username = "bahartezcan"
                        },
                        new
                        {
                            Id = 17,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(8266),
                            Firstname = "Azad",
                            IsActive = true,
                            IsDeleted = false,
                            Lastname = "Karaeski",
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(8266),
                            Password = "azadkaraeski",
                            Username = "azadkaraeski"
                        });
                });

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(4063),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(4076),
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(4232),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(4234),
                            RoleId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(4239),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(4241),
                            RoleId = 3,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(4244),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(4246),
                            RoleId = 3,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(4249),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(4251),
                            RoleId = 3,
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(4254),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(4256),
                            RoleId = 3,
                            UserId = 6
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(4260),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(4262),
                            RoleId = 3,
                            UserId = 7
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(4265),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(4267),
                            RoleId = 4,
                            UserId = 8
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(4270),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(4273),
                            RoleId = 4,
                            UserId = 9
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(4276),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(4278),
                            RoleId = 4,
                            UserId = 10
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(4281),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(4283),
                            RoleId = 4,
                            UserId = 11
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(4286),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(4289),
                            RoleId = 4,
                            UserId = 12
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(4292),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(4294),
                            RoleId = 4,
                            UserId = 13
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(4297),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(4299),
                            RoleId = 4,
                            UserId = 14
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(4303),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(4305),
                            RoleId = 4,
                            UserId = 15
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(4308),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(4310),
                            RoleId = 4,
                            UserId = 16
                        },
                        new
                        {
                            Id = 17,
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(4314),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 875, DateTimeKind.Local).AddTicks(4316),
                            RoleId = 4,
                            UserId = 17
                        });
                });

            modelBuilder.Entity("BrightWeb.Entity.Concrete.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Experience")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FinishCourseTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("HowManyMonths")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LevelId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Price")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartCourseTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TotalCourseHours")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LevelId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Kuloğlu Mh., Barbaros Blv. Yıldız İş Hanı No:9, 34353 Beşiktaş/İstanbul",
                            CategoryId = 2,
                            Comment = "Çok iyi bir kurs 10 puan",
                            CompanyId = 1,
                            Content = "html css bootstrap react react native c# .net javascript node.js ajax",
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(866),
                            Description = "Full Stack Developer eğitimi kapsamlı bir eğitim.",
                            Experience = "Bu eğitim sayesinde;Temel ve ileri veritabanı mantığını, Web’in ve yazılımın çalışma prensibini ve tüm süreçlerini, Yeni nesil tüm programlama araç ve dillerini, Back end programlamayı ve API yazmayı, Uçtan uca bir proje geliştirmeyi öğreneceksiniz.",
                            FinishCourseTime = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HowManyMonths = "2",
                            IsActive = false,
                            IsDeleted = false,
                            LevelId = 1,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(869),
                            Name = "Full Stack Web Developer",
                            Price = 10000,
                            StartCourseTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Açılacak",
                            TeacherId = 1,
                            TotalCourseHours = "200"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Kuloğlu Mh., Barbaros Blv. Yıldız İş Hanı No:9, 34353 Beşiktaş/İstanbul",
                            CategoryId = 2,
                            Comment = "Çok iyi bir kurs 10 puan",
                            CompanyId = 1,
                            Content = "html css bootstrap react react native c# .net javascript node.js ajax",
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(886),
                            Description = "Full Stack Developer eğitimi kapsamlı bir eğitim.",
                            Experience = "Bu eğitim sayesinde;Temel ve ileri veritabanı mantığını, Web’in ve yazılımın çalışma prensibini ve tüm süreçlerini, Yeni nesil tüm programlama araç ve dillerini, Back end programlamayı ve API yazmayı, Uçtan uca bir proje geliştirmeyi öğreneceksiniz.",
                            FinishCourseTime = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HowManyMonths = "4",
                            IsActive = false,
                            IsDeleted = false,
                            LevelId = 2,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(887),
                            Name = "Full Stack Web Developer",
                            Price = 10000,
                            StartCourseTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Açılacak",
                            TeacherId = 1,
                            TotalCourseHours = "400"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Kuloğlu Mh., Barbaros Blv. Yıldız İş Hanı No:9, 34353 Beşiktaş/İstanbul",
                            CategoryId = 2,
                            Comment = "Çok iyi bir kurs 10 puan",
                            CompanyId = 1,
                            Content = "html css bootstrap react react native c# .net javascript node.js ajax",
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(892),
                            Description = "Full Stack Developer eğitimi kapsamlı bir eğitim.",
                            Experience = "Bu eğitim sayesinde;Temel ve ileri veritabanı mantığını, Web’in ve yazılımın çalışma prensibini ve tüm süreçlerini, Yeni nesil tüm programlama araç ve dillerini, Back end programlamayı ve API yazmayı, Uçtan uca bir proje geliştirmeyi öğreneceksiniz.",
                            FinishCourseTime = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HowManyMonths = "6",
                            IsActive = false,
                            IsDeleted = false,
                            LevelId = 3,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(893),
                            Name = "Full Stack Web Developer",
                            Price = 10000,
                            StartCourseTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Açılacak",
                            TeacherId = 1,
                            TotalCourseHours = "600"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Kuloğlu Mh., Barbaros Blv. Yıldız İş Hanı No:9, 34353 Beşiktaş/İstanbul",
                            CategoryId = 3,
                            Comment = "Çok iyi bir kurs 10 puan",
                            CompanyId = 1,
                            Content = "Swift",
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(897),
                            Description = "IOS Developer",
                            Experience = "Bu eğitimde IOS Developer olmak adına seçeceğiniz eğitim seviyesine göre eğitim alacak swift programını öğreneceksiniz.",
                            FinishCourseTime = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HowManyMonths = "1",
                            IsActive = false,
                            IsDeleted = false,
                            LevelId = 1,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(897),
                            Name = "IOS Developer",
                            Price = 10000,
                            StartCourseTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Açılacak",
                            TeacherId = 2,
                            TotalCourseHours = "100"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Kuloğlu Mh., Barbaros Blv. Yıldız İş Hanı No:9, 34353 Beşiktaş/İstanbul",
                            CategoryId = 3,
                            Comment = "Çok iyi bir kurs 10 puan",
                            CompanyId = 1,
                            Content = "Swift",
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(902),
                            Description = "IOS Developer",
                            Experience = "Bu eğitimde IOS Developer olmak adına seçeceğiniz eğitim seviyesine göre eğitim alacak swift programını öğreneceksiniz.",
                            FinishCourseTime = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HowManyMonths = "2",
                            IsActive = false,
                            IsDeleted = false,
                            LevelId = 2,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(903),
                            Name = "IOS Developer",
                            Price = 10000,
                            StartCourseTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Açılacak",
                            TeacherId = 2,
                            TotalCourseHours = "200"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Kuloğlu Mh., Barbaros Blv. Yıldız İş Hanı No:9, 34353 Beşiktaş/İstanbul",
                            CategoryId = 3,
                            Comment = "Çok iyi bir kurs 10 puan",
                            CompanyId = 1,
                            Content = "Swift",
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(907),
                            Description = "IOS Developer",
                            Experience = "Bu eğitimde IOS Developer olmak adına seçeceğiniz eğitim seviyesine göre eğitim alacak swift programını öğreneceksiniz.",
                            FinishCourseTime = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HowManyMonths = "3",
                            IsActive = false,
                            IsDeleted = false,
                            LevelId = 3,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(907),
                            Name = "IOS Developer",
                            Price = 10000,
                            StartCourseTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Açılacak",
                            TeacherId = 2,
                            TotalCourseHours = "300"
                        },
                        new
                        {
                            Id = 7,
                            Address = "Kuloğlu Mh., Barbaros Blv. Yıldız İş Hanı No:9, 34353 Beşiktaş/İstanbul",
                            CategoryId = 4,
                            Comment = "Çok iyi bir kurs 10 puan",
                            CompanyId = 1,
                            Content = "c# .net javascript node.js ajax ",
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(912),
                            Description = "Backend Developer",
                            Experience = "Bu eğitimde Backend Developer olmak adına seçeceğiniz eğitim seviyesine göre eğitim alacak gerekli programları öğreneceksiniz.",
                            FinishCourseTime = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HowManyMonths = "1",
                            IsActive = false,
                            IsDeleted = false,
                            LevelId = 1,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(913),
                            Name = "Backend Developer",
                            Price = 10000,
                            StartCourseTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Açılacak",
                            TeacherId = 3,
                            TotalCourseHours = "100"
                        },
                        new
                        {
                            Id = 8,
                            Address = "Kuloğlu Mh., Barbaros Blv. Yıldız İş Hanı No:9, 34353 Beşiktaş/İstanbul",
                            CategoryId = 4,
                            Comment = "Çok iyi bir kurs 10 puan",
                            CompanyId = 1,
                            Content = "c# .net javascript node.js ajax ",
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(917),
                            Description = "Backend Developer",
                            Experience = "Bu eğitimde Backend Developer olmak adına seçeceğiniz eğitim seviyesine göre eğitim alacak gerekli programları öğreneceksiniz.",
                            FinishCourseTime = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HowManyMonths = "2",
                            IsActive = false,
                            IsDeleted = false,
                            LevelId = 2,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(917),
                            Name = "Backend Developer",
                            Price = 10000,
                            StartCourseTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Açılacak",
                            TeacherId = 3,
                            TotalCourseHours = "200"
                        },
                        new
                        {
                            Id = 9,
                            Address = "Kuloğlu Mh., Barbaros Blv. Yıldız İş Hanı No:9, 34353 Beşiktaş/İstanbul",
                            CategoryId = 4,
                            Comment = "Çok iyi bir kurs 10 puan",
                            CompanyId = 1,
                            Content = "c# .net javascript node.js ajax ",
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(921),
                            Description = "Backend Developer",
                            Experience = "Bu eğitimde Backend Developer olmak adına seçeceğiniz eğitim seviyesine göre eğitim alacak gerekli programları öğreneceksiniz.",
                            FinishCourseTime = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HowManyMonths = "3",
                            IsActive = false,
                            IsDeleted = false,
                            LevelId = 3,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(922),
                            Name = "Backend Developer",
                            Price = 10000,
                            StartCourseTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Açılacak",
                            TeacherId = 3,
                            TotalCourseHours = "300"
                        },
                        new
                        {
                            Id = 10,
                            Address = "Kuloğlu Mh., Barbaros Blv. Yıldız İş Hanı No:9, 34353 Beşiktaş/İstanbul",
                            CategoryId = 5,
                            Comment = "Çok iyi bir kurs 10 puan",
                            CompanyId = 1,
                            Content = "html css bootstrap javascript react react native",
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(926),
                            Description = "Frontend Developer",
                            Experience = "Bu eğitimde Frontend Developer olmak adına seçeceğiniz eğitim seviyesine göre eğitim alacak gerekli programları öğreneceksiniz.",
                            FinishCourseTime = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HowManyMonths = "1",
                            IsActive = false,
                            IsDeleted = false,
                            LevelId = 1,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(927),
                            Name = "Frontend Developer",
                            Price = 10000,
                            StartCourseTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Açılacak",
                            TeacherId = 4,
                            TotalCourseHours = "100"
                        },
                        new
                        {
                            Id = 11,
                            Address = "Kuloğlu Mh., Barbaros Blv. Yıldız İş Hanı No:9, 34353 Beşiktaş/İstanbul",
                            CategoryId = 5,
                            Comment = "Çok iyi bir kurs 10 puan",
                            CompanyId = 1,
                            Content = "html css bootstrap javascript react react native",
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(931),
                            Description = "Frontend Developer",
                            Experience = "Bu eğitimde Frontend Developer olmak adına seçeceğiniz eğitim seviyesine göre eğitim alacak gerekli programları öğreneceksiniz.",
                            FinishCourseTime = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HowManyMonths = "2",
                            IsActive = false,
                            IsDeleted = false,
                            LevelId = 2,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(931),
                            Name = "Frontend Developer",
                            Price = 10000,
                            StartCourseTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Açılacak",
                            TeacherId = 4,
                            TotalCourseHours = "200"
                        },
                        new
                        {
                            Id = 12,
                            Address = "Kuloğlu Mh., Barbaros Blv. Yıldız İş Hanı No:9, 34353 Beşiktaş/İstanbul",
                            CategoryId = 5,
                            Comment = "Çok iyi bir kurs 10 puan",
                            CompanyId = 1,
                            Content = "html css bootstrap javascript react react native",
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(936),
                            Description = "Frontend Developer",
                            Experience = "Bu eğitimde Frontend Developer olmak adına seçeceğiniz eğitim seviyesine göre eğitim alacak gerekli programları öğreneceksiniz.",
                            FinishCourseTime = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HowManyMonths = "3",
                            IsActive = false,
                            IsDeleted = false,
                            LevelId = 3,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(937),
                            Name = "Frontend Developer",
                            Price = 10000,
                            StartCourseTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Açılacak",
                            TeacherId = 4,
                            TotalCourseHours = "300"
                        },
                        new
                        {
                            Id = 13,
                            Address = "Kuloğlu Mh., Barbaros Blv. Yıldız İş Hanı No:9, 34353 Beşiktaş/İstanbul",
                            CategoryId = 6,
                            Comment = "Çok iyi bir kurs 10 puan",
                            CompanyId = 1,
                            Content = "Java",
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(941),
                            Description = "Frontend Developer",
                            Experience = "Bu eğitimde Java Developer olmak adına seçeceğiniz eğitim seviyesine göre eğitim alacak gerekli programları öğreneceksiniz.",
                            FinishCourseTime = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HowManyMonths = "1",
                            IsActive = false,
                            IsDeleted = false,
                            LevelId = 1,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(941),
                            Name = "Java Developer",
                            Price = 10000,
                            StartCourseTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Açılacak",
                            TeacherId = 5,
                            TotalCourseHours = "100"
                        },
                        new
                        {
                            Id = 14,
                            Address = "Kuloğlu Mh., Barbaros Blv. Yıldız İş Hanı No:9, 34353 Beşiktaş/İstanbul",
                            CategoryId = 6,
                            Comment = "Çok iyi bir kurs 10 puan",
                            CompanyId = 1,
                            Content = "Java",
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(945),
                            Description = "Frontend Developer",
                            Experience = "Bu eğitimde Java Developer olmak adına seçeceğiniz eğitim seviyesine göre eğitim alacak gerekli programları öğreneceksiniz.",
                            FinishCourseTime = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HowManyMonths = "2",
                            IsActive = false,
                            IsDeleted = false,
                            LevelId = 2,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(946),
                            Name = "Java Developer",
                            Price = 10000,
                            StartCourseTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Açılacak",
                            TeacherId = 5,
                            TotalCourseHours = "200"
                        },
                        new
                        {
                            Id = 15,
                            Address = "Kuloğlu Mh., Barbaros Blv. Yıldız İş Hanı No:9, 34353 Beşiktaş/İstanbul",
                            CategoryId = 6,
                            Comment = "Çok iyi bir kurs 10 puan",
                            CompanyId = 1,
                            Content = "Java",
                            CreatedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(950),
                            Description = "Frontend Developer",
                            Experience = "Bu eğitimde Java Developer olmak adına seçeceğiniz eğitim seviyesine göre eğitim alacak gerekli programları öğreneceksiniz.",
                            FinishCourseTime = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HowManyMonths = "3",
                            IsActive = false,
                            IsDeleted = false,
                            LevelId = 3,
                            ModifiedDate = new DateTime(2023, 10, 16, 0, 9, 4, 880, DateTimeKind.Local).AddTicks(951),
                            Name = "Java Developer",
                            Price = 10000,
                            StartCourseTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Açılacak",
                            TeacherId = 5,
                            TotalCourseHours = "300"
                        });
                });

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.CourseStudent", b =>
                {
                    b.HasOne("BrightWeb.Entity.Concrete.Course", "Course")
                        .WithMany("CourseStudents")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BrightAkademi.Entity.Concrete.Student", "Student")
                        .WithMany("CourseStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.Student", b =>
                {
                    b.HasOne("BrightAkademi.Entity.Concrete.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.Teacher", b =>
                {
                    b.HasOne("BrightAkademi.Entity.Concrete.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.TeacherCourse", b =>
                {
                    b.HasOne("BrightWeb.Entity.Concrete.Course", "Course")
                        .WithMany("TeacherCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BrightAkademi.Entity.Concrete.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.UserRole", b =>
                {
                    b.HasOne("BrightAkademi.Entity.Concrete.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BrightAkademi.Entity.Concrete.Teacher", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("TeacherId");

                    b.HasOne("BrightAkademi.Entity.Concrete.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrightWeb.Entity.Concrete.Course", b =>
                {
                    b.HasOne("BrightAkademi.Entity.Concrete.Category", "Category")
                        .WithMany("Course")
                        .HasForeignKey("CategoryId");

                    b.HasOne("BrightAkademi.Entity.Concrete.Company", "Company")
                        .WithMany("Courses")
                        .HasForeignKey("CompanyId");

                    b.HasOne("BrightAkademi.Entity.Concrete.Level", "Level")
                        .WithMany("Courses")
                        .HasForeignKey("LevelId");

                    b.HasOne("BrightAkademi.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Category");

                    b.Navigation("Company");

                    b.Navigation("Level");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.Category", b =>
                {
                    b.Navigation("Course");
                });

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.Company", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.Level", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.Student", b =>
                {
                    b.Navigation("CourseStudents");
                });

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.Teacher", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("BrightWeb.Entity.Concrete.Course", b =>
                {
                    b.Navigation("CourseStudents");

                    b.Navigation("TeacherCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
